//---------------------------------------------------------------------------------------------------------------------
// file:    Math.cpp
// author:  Andy Ellinger
// brief:   
//
// Copyright © 2022 DigiPen, All rights reserved.
//---------------------------------------------------------------------------------------------------------------------

#include "AEMath.h"

namespace AudioEngine
{
    //------------------------------------------------------------------------------------------------------------ Vec2

    //*****************************************************************************************************************
    float Vec2::Dot(const Vec2& other) const
    {
        return X * other.X + Y * other.Y;
    }

    //*****************************************************************************************************************
    bool Vec2::operator==(const Vec2& rhs) const
    {
        if (X != rhs.X || Y != rhs.Y)
            return false;
        else
            return true;
    }

    //*****************************************************************************************************************
    bool Vec2::operator!=(const Vec2& rhs) const
    {
        return !(*this == rhs);
    }

    //------------------------------------------------------------------------------------------------------------ Vec3

    //*****************************************************************************************************************
    float Vec3::Length() const
    {
        return sqrtf(X * X + Y * Y + Z * Z);
    }

    //*****************************************************************************************************************
    bool Vec3::operator==(const Vec3& rhs) const
    {
        if (X != rhs.X || Y != rhs.Y || Z != rhs.Z)
            return false;
        else
            return true;
    }

    //*****************************************************************************************************************
    bool Vec3::operator!=(const Vec3& rhs) const
    {
        return !(*this == rhs);
    }

    //*****************************************************************************************************************
    Vec3 Vec3::operator-(const Vec3& rhs) const
    {
        return Vec3(X - rhs.X, Y - rhs.Y, Z - rhs.Z);
    }

    //------------------------------------------------------------------------------------------------------------ Mat2

    //*****************************************************************************************************************
    void Mat2::Rotate(float radians)
    {
        float cosTheta = std::cos(radians);
        float sinTheta = std::sin(radians);
        m00 = cosTheta;
        m01 = -sinTheta;
        m10 = sinTheta;
        m11 = cosTheta;
    }

    //*****************************************************************************************************************
    void Mat2::Invert()
    {
        float invDeterminant = 1.0f / (m00 * m11 - m01 * m10);

        float temp00 = m11;
        float temp01 = -m01;
        float temp10 = -m10;
        float temp11 = m00;

        m00 = temp00 * invDeterminant;
        m01 = temp01 * invDeterminant;
        m10 = temp10 * invDeterminant;
        m11 = temp11 * invDeterminant;
    }

    //*****************************************************************************************************************
    Vec2 Mat2::operator*(const Vec2& rhs) const
    {
        float x = rhs.Dot(Vec2(m00, m01));
        float y = rhs.Dot(Vec2(m10, m11));
        return Vec2(x, y);
    }
}
